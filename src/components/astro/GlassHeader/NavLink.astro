---
const {
	href,
	isMobile,
	icon,
	index,
	name,
	mobileTopBorder = true,
} = Astro.props;
---

<script>
	import { inView, animate, hover } from 'motion';

	const index = document.querySelector('.index')?.innerHTML as unknown as number;
	const isMobile = document.querySelector('.is-mobile') === null ? false : true; 

	const animationDelay = ({ duration: 0.2, delay: index * 0.1 });

	inView(
	  'a',
	  isMobile ? 
			(element:Element) => {
				animate(element, { opacity: [0, 1], x: [-20, 0] }, animationDelay);
				return () => animate(element, { opacity: [1, 0], x: [0, -20] }, animationDelay);
			}
		:
		(element:Element) => {
			animate(element, { opacity: [0, 1], y: [-10, 0] }, animationDelay);
			return () => animate(element, { opacity: [1, 0], y: [0, -10] }, animationDelay);
		},
	);

	if (!isMobile) {
		hover('a', (element:Element) => {
			animate(element, {y: [0, -2]}, animationDelay);
			return () => animate(element, {y: [-2, 0]}, animationDelay);
		});
	}
</script>

{isMobile && <span class="is-mobile" />}
<span class="index">{index}</span>
<div class:list={['nav-link-wrapper', { 'mobile': isMobile}, { 'with-border': mobileTopBorder }]}>
	{icon !== null && icon !== undefined && <span class="nav-icon">{icon}</span>}
	<a
		{href}
		class:list={['nav-link', { 'mobile': isMobile}]}
	>
		{name}
	</a>
</div>

<style>
	@reference "@/styles/global.css";
	.index {
		@apply hidden;
	}
	.nav-icon {
		@apply pr-1.5;
	}
	.is-mobile {
		margin: 0;
	}
	.nav-link-wrapper.mobile {
		@apply pt-3 pb-3 mb-0;
		&.with-border {
			@apply border-t-1;
		}
	}
</style>
