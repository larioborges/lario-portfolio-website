---
interface Props {
	class?: string;
	'class:list'?: (Record<string, boolean> | string)[];
	variant?:
		| 'default'
		| 'destructive'
		| 'outline'
		| 'secondary'
		| 'ghost'
		| 'link';
	size?: 'default' | 'sm' | 'lg' | 'icon';
	asChild?: boolean | undefined;
	name?: string;
}

const {
	class: className = '',
	'class:list': classList = [],
	variant = 'default',
	size = 'default',
	asChild = false,
	name = '',
	...props
}: Props = Astro.props as Props;
---

<style>
	@reference '@/styles/global.css'

	button {
		@apply hover:cursor-pointer;

		&.default {
			@apply bg-primary text-primary-foreground shadow hover:bg-primary/90;
		}
		&.destructive {
			@apply bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90;
		}
		&.outline {
			@apply border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground;
		}
		&.secondary {
			@apply bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80;
		}
		&.ghost {
			@apply hover:bg-accent hover:text-accent-foreground;
		}
		&.link {
			@apply text-primary underline-offset-4 hover:underline;
		}
		&.size-default {
			@apply h-9 px-4 py-2;
		}
		&.size-sm {
			@apply h-8 rounded-md px-3 text-xs;
		}
		&.size-lg {
			@apply h-10 rounded-md px-8;
		}
		&.size-icon {
			@apply h-9 w-9;
		}
	}
</style>

{
	asChild ? (
		<slot {...props} />
	) : (
		<button
			class:list={[className, variant, `size-${size}`, ...classList]}
			aria-label={name}
			{...props}
		>
			<slot />
		</button>
	)
}
